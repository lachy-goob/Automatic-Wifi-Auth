# -*- text -*-
##
##  eap.conf -- Configuration for EAP types (PEAP, TTLS, etc.)
##
##	$Id: 84660d7c1e84d9cdd144b2ceba08a44ebc44d7e1 $

#######################################################################
#
#  Whatever you do, do NOT set 'Auth-Type := EAP'.  The server
#  is smart enough to figure this out on its own.  The most
#  common side effect of setting 'Auth-Type := EAP' is that the
#  users then cannot use ANY other authentication method.
#
eap {
	#  Invoke the default supported EAP type when
	#  EAP-Identity response is received.
	#
	#  The incoming EAP messages DO NOT specify which EAP
	#  type they will be using, so it MUST be set here.
	#
	#  For now, only one default EAP type may be used at a time.
	#
	#  If the EAP-Type attribute is set by another module,
	#  then that EAP type takes precedence over the
	#  default type configured here.
	#
	default_eap_type = md5

	#  A list is maintained to correlate EAP-Response
	#  packets with EAP-Request packets.  After a
	#  configurable length of time, entries in the list
	#  expire, and are deleted.
	#
	timer_expire = 60

	#
	#  Some supplicants may misbehave by starting many thousands
	#  of EAP sessions, but never finishing them.  These sessions
	#  can cause the server to hit 'max_sessions' very quickly.
	#  The 'timer_expire' configuration above does not help as
	#  much as it could, because the old (duplicate) session
	#  should be deleted as soon as the new one comes in.
	#
	#  If you set the 'dedup_key' below, whenever the EAP module
	#  starts a new session, it will check for a previous session
	#  which has the same dedup key.  If a previous session
	#  is found, it is deleted.
	#
	#  Setting this configuration item may cause issues if the
	#  same device uses multiple EAP sessions at the same time.
	#  But that device behavior should be rare to non-existent.
	#
	#  The configuration item is commented out so that upgrades
	#  do not change existing behavior.
	#
#	dedup_key = "%{Calling-Station-Id}"

	#  There are many EAP types, but the server has support
	#  for only a limited subset.  If the server receives
	#  a request for an EAP type it does not support, then
	#  it normally rejects the request.  By setting this
	#  configuration to "yes", you can tell the server to
	#  instead keep processing the request.  Another module
	#  MUST then be configured to proxy the request to
	#  another RADIUS server which supports that EAP type.
	#
	#  If another module is NOT configured to handle the
	#  request, then the request will still end up being
	#  rejected.
	#
	ignore_unknown_eap_types = no

	# Cisco AP1230B firmware 12.2(13)JA1 has a bug.  When given
	# a User-Name attribute in an Access-Accept, it copies one
	# more byte than it should.
	#
	# We can work around it by configurably adding an extra
	# zero byte.
	#
	cisco_accounting_username_bug = no

	#  Help prevent DoS attacks by limiting the number of
	#  sessions that the server is tracking.  For simplicity,
	#  this is taken from the "max_requests" directive in
	#  radiusd.conf.
	#
	max_sessions = ${max_requests}


	############################################################
	#
	#  Supported EAP-types
	#


	#  EAP-MD5
	#
	#  We do NOT recommend using EAP-MD5 authentication
	#  for wireless connections.  It is insecure, and does
	#  not provide for dynamic WEP keys.
	#
	md5 {
	}


	#  EAP-pwd -- secure password-based authentication
	#
	#pwd {
	#	group = 19

	#	server_id = theserver@example.com

		#  This has the same meaning as for TLS.
		#
	#	fragment_size = 1020

		# The virtual server which determines the
		# "known good" password for the user.
		# Note that unlike TLS, only the "authorize"
		# section is processed.  EAP-PWD requests can be
		# distinguished by having a User-Name, but
		# no User-Password, CHAP-Password, EAP-Message, etc.
		#
	#	virtual_server = "inner-tunnel"
	#}


	#  Cisco LEAP
	#
	#  We do not recommend using LEAP in new deployments.  See:
	#  http://www.securiteam.com/tools/5TP012ACKE.html
	#
	#  LEAP is not supported.
	#  It is insecure, and no one should be using it.
	#


	#  EAP-GTC -- Generic Token Card
	#
	#  Currently, this is only permitted inside of EAP-TTLS,
	#  or EAP-PEAP.  The module "challenges" the user with
	#  text, and the response from the user is taken to be
	#  the User-Password.
	#
	#  Proxying the tunneled EAP-GTC session is a bad idea,
	#  the users password will go over the wire in plain-text,
	#  for anyone to see.
	#
	gtc {
		#  The default challenge, which many clients
		#  ignore..
		#
	#	challenge = "Password: "

		#  The plain-text response which comes back
		#  is put into a User-Password attribute,
		#  and passed to another module for
		#  authentication.  This allows the EAP-GTC
		#  response to be checked against plain-text,
		#  or crypt'd passwords.
		#
		#  If you say "Local" instead of "PAP", then
		#  the module will look for a User-Password
		#  configured for the request, and do the
		#  authentication itself.
		#
		auth_type = PAP
	}


	#  Common TLS configuration for TLS-based EAP types
	#  ------------------------------------------------
	#
	#  See raddb/certs/README.md for additional comments
	#  on certificates.
	#
	#  If OpenSSL was not found at the time the server was
	#  built, the "tls", "ttls", and "peap" sections will
	#  be ignored.
	#
	#  If you do not currently have certificates signed by
	#  a trusted CA you may use the 'snakeoil' certificates.
	#  Included with the server in raddb/certs.
	#
	#  If these certificates have not been auto-generated:
	#    cd raddb/certs
	#    make
	#
	#  These test certificates SHOULD NOT be used in a normal
	#  deployment.  They are created only to make it easier
	#  to install the server, and to perform some simple
	#  tests with EAP-TLS, TTLS, or PEAP.
	#
	#  Note that you should NOT use a globally known CA here!
	#  e.g. using a Verisign cert as a "known CA" means that
	#  ANYONE who has a certificate signed by them can
	#  authenticate via EAP-TLS!  This is likely not what you want.
	#
	tls-config tls-common {
    private_key_password = EvaBluett2103!
    private_key_file = /etc/freeradius/certs/server.key
    certificate_file = /etc/freeradius/certs/server.pem
    ca_file = /etc/freeradius/certs/ca.pem

    dh_file = /etc/freeradius/certs/dh

    cipher_list = "DEFAULT"
    ecdh_curve = "prime256v1"
		cache {
			enable = no
		}

		check_cert_issuer = "/etc/freeradius/certs/ca.pem"
	}


	#  EAP-TLS
	#
	#  The TLS configuration for TLS-based EAP types is held in
	#  the "tls-config" section, above.
	#
	tls {
		#  Point to the common TLS configuration
		#
		tls = tls-common

		#  As part of checking a client certificate, the EAP-TLS
		#  sets some attributes such as TLS-Client-Cert-Common-Name. This
		#  virtual server has access to these attributes, and can
		#  be used to accept or reject the request.
		#
	#	virtual_server = check-eap-tls

		#  You can control whether or not EAP-TLS requires a
		#  client certificate by setting
		#
		#	configurable_client_cert = yes
		#
		#  Once that setting has been changed, you can then set
		#
		#	EAP-TLS-Require-Client-Cert = No
		#
		#  in the control items for a request, and the EAP-TLS
		#  module will not require a client certificate from
		#  the supplicant.
		#
		#  WARNING: This configuration should only be used
		#  when the users are placed into a "captive portal"
		#  or "walled garden", where they have limited network
		#  access.  Otherwise the configuraton will allow
		#  anyone on the network, without authenticating them!
		#
#		configurable_client_cert = no
	}


	#  EAP-TTLS -- Tunneled TLS
	#
	#  The TTLS module implements the EAP-TTLS protocol,
	#  which can be described as EAP inside of Diameter,
	#  inside of TLS, inside of EAP, inside of RADIUS...
	#
	#  Surprisingly, it works quite well.
	#
	ttls {
		#  Which tls-config section the TLS negotiation parameters
		#  are in - see EAP-TLS above for an explanation.
		#
		#  In the case that an old configuration from FreeRADIUS
		#  v2.x is being used, all the options of the tls-config
		#  section may also appear instead in the 'tls' section
		#  above. If that is done, the tls= option here (and in
		#  tls above) MUST be commented out.
		#
		tls = tls-common

		#  The tunneled EAP session needs a default EAP type
		#  which is separate from the one for the non-tunneled
		#  EAP module.  Inside of the TTLS tunnel, we recommend
		#  using EAP-MD5.  If the request does not contain an
		#  EAP conversation, then this configuration entry is
		#  ignored.
		#
		default_eap_type = tls

		#  The tunneled authentication request does not usually
		#  contain useful attributes like 'Calling-Station-Id',
		#  etc.  These attributes are outside of the tunnel,
		#  and normally unavailable to the tunneled
		#  authentication request.
		#
		#  By setting this configuration entry to 'yes',
		#  any attribute which is NOT in the tunneled
		#  authentication request, but which IS available
		#  outside of the tunnel, is copied to the tunneled
		#  request.
		#
		#  allowed values: {no, yes}
		#
		copy_request_to_tunnel = no

		#  This configuration item is deprecated.  Instead,
		#  you should use:
		#
		#    update outer.session-state {
		#      ...
		#    }
		#
		#  This will cache attributes for the final Access-Accept.
		#
		#  See "update outer.session-state" in the "post-auth"
		#  sections of sites-available/default, and of
		#  sites-available/inner-tunnel
		#
		#  The reply attributes sent to the NAS are usually
		#  based on the name of the user 'outside' of the
		#  tunnel (usually 'anonymous').  If you want to send
		#  the reply attributes based on the user name inside
		#  of the tunnel, then set this configuration entry to
		#  'yes', and the reply to the NAS will be taken from
		#  the reply to the tunneled request.
		#
		#  allowed values: {no, yes}
		#
		use_tunneled_reply = no

		#  The inner tunneled request can be sent
		#  through a virtual server constructed
		#  specifically for this purpose.
		#
		#  A virtual server MUST be specified.
		#
		virtual_server = "inner-tunnel"

		#  This has the same meaning, and overwrites, the
		#  same field in the "tls" configuration, above.
		#  The default value here is "yes".
		#
	#	include_length = yes

		#  Unlike EAP-TLS, EAP-TTLS does not require a client
		#  certificate. However, you can require one by setting the
		#  following option. You can also override this option by
		#  setting
		#
		#    EAP-TLS-Require-Client-Cert = Yes
		#
		#  in the control items for a request.
		#
		#  Note that the majority of supplicants do not support using a
		#  client certificate with EAP-TTLS, so this option is unlikely
		#  to be usable for most people.
		#
	#	require_client_cert = yes
	}


	#  EAP-PEAP
	#

	##################################################
	#
	#  !!!!! WARNINGS for Windows compatibility  !!!!!
	#
	##################################################
	#
	#  If you see the server send an Access-Challenge,
	#  and the client never sends another Access-Request,
	#  then
	#
	#		STOP!
	#
	#  The server certificate has to have special OID's
	#  in it, or else the Microsoft clients will silently
	#  fail.  See the "scripts/xpextensions" file for
	#  details, and the following page:
	#
	#	https://support.microsoft.com/en-us/help/814394/
	#
	#  If is still doesn't work, and you're using Samba,
	#  you may be encountering a Samba bug.  See:
	#
	#	https://bugzilla.samba.org/show_bug.cgi?id=6563
	#
	#  Note that we do not necessarily agree with their
	#  explanation... but the fix does appear to work.
	#
	##################################################

	#  The tunneled EAP session needs a default EAP type
	#  which is separate from the one for the non-tunneled
	#  EAP module.  Inside of the TLS/PEAP tunnel, we
	#  recommend using EAP-MS-CHAPv2.
	#
	peap {
		#  Which tls-config section the TLS negotiation parameters
		#  are in - see EAP-TLS above for an explanation.
		#
		#  In the case that an old configuration from FreeRADIUS
		#  v2.x is being used, all the options of the tls-config
		#  section may also appear instead in the 'tls' section
		#  above. If that is done, the tls= option here (and in
		#  tls above) MUST be commented out.
		#
		tls = tls-common

		#  The tunneled EAP session needs a default
		#  EAP type which is separate from the one for
		#  the non-tunneled EAP module.  Inside of the
		#  PEAP tunnel, we recommend using MS-CHAPv2,
		#  as that is the default type supported by
		#  Windows clients.
		#
		default_eap_type = mschapv2

		#  The PEAP module also has these configuration
		#  items, which are the same as for TTLS.
		#
		copy_request_to_tunnel = no

		#  This configuration item is deprecated.  Instead,
		#  you should use:
		#
		#    update outer.session-state {
		#      ...
		#    }
		#
		#  This will cache attributes for the final Access-Accept.
		#
		#  See "update outer.session-state" in the "post-auth"
		#  sections of sites-available/default, and of
		#  sites-available/inner-tunnel
		#
		use_tunneled_reply = no

		#  When the tunneled session is proxied, the
		#  home server may not understand EAP-MSCHAP-V2.
		#  Set this entry to "no" to proxy the tunneled
		#  EAP-MSCHAP-V2 as normal MSCHAPv2.
		#
		#  This setting can be over-ridden on a packet by
		#  packet basis by setting
		#
		#	&control:Proxy-Tunneled-Request-As-EAP = yes
		#
	#	proxy_tunneled_request_as_eap = yes

		#  The inner tunneled request can be sent
		#  through a virtual server constructed
		#  specifically for this purpose.
		#
		#  A virtual server MUST be specified.
		#
		virtual_server = "inner-tunnel"

		#  This option enables support for MS-SoH
		#  see doc/SoH.txt for more info.
		#  It is disabled by default.
		#
	#	soh = yes

		#  The SoH reply will be turned into a request which
		#  can be sent to a specific virtual server:
		#
	#	soh_virtual_server = "soh-server"

		#  Unlike EAP-TLS, PEAP does not require a client certificate.
		#  However, you can require one by setting the following
		#  option. You can also override this option by setting
		#
		#    EAP-TLS-Require-Client-Cert = Yes
		#
		#  in the control items for a request.
		#
		#  Note that the majority of supplicants do not support using a
		#  client certificate with PEAP, so this option is unlikely to
		#  be usable for most people.
		#
	#	require_client_cert = yes
	}


	#  EAP-MSCHAPv2
	#
	#  Note that it is the EAP MS-CHAPv2 sub-module, not
	#  the main 'mschap' module.
	#
	#  Note also that in order for this sub-module to work,
	#  the main 'mschap' module MUST ALSO be configured.
	#
	#  This module is the *Microsoft* implementation of MS-CHAPv2
	#  in EAP.  There is another (incompatible) implementation
	#  of MS-CHAPv2 in EAP by Cisco, which FreeRADIUS does not
	#  currently support.
	#
	mschapv2 {
		#  In earlier versions of the server, this module
		#  never sent the MS-CHAP-Error message to the client.
		#  This worked, but it had issues when the cached
		#  password was wrong.  The server *should* send
		#  "E=691 R=0" to the client, which tells it to prompt
		#  the user for a new password.
		#
		#  The default is to use that functionality.  which is
		#  known to work.  If you set "send_error = yes", then
		#  the error message will be sent back to the client.
		#  This *may* help some clients work better, but *may*
		#  also cause other clients to stop working.
		#
	#	send_error = no

		#  Server identifier to send back in the challenge.
		#  This should generally be the host name of the
		#  RADIUS server.  Or, some information to uniquely
		#  identify it.
		#
	#	identity = "FreeRADIUS"
	}


	#  EAP-FAST
	#
	#  The FAST module implements the EAP-FAST protocol
	#
	#fast {
		#  Point to the common TLS configuration
		#
	#	tls = tls-common

		#  If 'cipher_list' is set here, it will over-ride the
		#  'cipher_list' configuration from the 'tls-common'
		#  configuration.  The EAP-FAST module has it's own
		#  over-ride for 'cipher_list' because the
		#  specifications mandata a different set of ciphers
		#  than are used by the other EAP methods.
		#
		#  cipher_list though must include "ADH" for anonymous provisioning.
		#  This is not as straight forward as appending "ADH" alongside
		#  "DEFAULT" as "DEFAULT" contains "!aNULL" so instead it is
		#  recommended "ALL:!EXPORT:!eNULL:!SSLv2" is used
		#
	#	cipher_list = "ALL:!EXPORT:!eNULL:!SSLv2"

		#  PAC lifetime in seconds (default: seven days)
		#
	#	pac_lifetime = 604800

		#  Authority ID of the server
		#
		#  If you are running a cluster of RADIUS servers, you should make
		#  the value chosen here (and for "pac_opaque_key") the same on all
		#  your RADIUS servers.  This value should be unique to your
		#  installation.  We suggest using a domain name.
		#
	#	authority_identity = "1234"

		#  PAC Opaque encryption key (must be exactly 32 bytes in size)
		#
		#  This value MUST be secret, and MUST be generated using
		#  a secure method, such as via 'openssl rand -hex 32'
		#
	#	pac_opaque_key = "0123456789abcdef0123456789ABCDEF"

		#  Same as for TTLS, PEAP, etc.
		#
	#	virtual_server = inner-tunnel
	#}

	#  EAP-TEAP
	#
	#  The TEAP module implements the EAP-TEAP protocol
	#
	#teap {
		#  Point to the common TLS configuration
		#
	#	tls = tls-common

	#	default_eap_type = mschapv2

		#
		#  Set the EAP type for user / machine authentication.
		#
		#  If set, these values over-ride "default_eap_type"
		#
		#  These values can be over-ridden at run time by setting
		#
		#	&session-state:TEAP-Type-User = ...
		#
		#  and
		#	&session-state:TEAP-Type-Machine = ...
		#
		#  The values for those attributes are the same as for EAP-Type.
		#
		#  Note that if you try to use "EAP-Type := TEAP" in the
		#  "inner-tunnel" virtual server, it will not work.
		#
		#
		#  PASSWORDS
		#
		#  Some supplicants support password authentication inside of
		#  TEAP.  This can be configured automatically by setting
		#
		#	identity_type = "user"
		#
		#  and then not setting "default_eap_type" or
		#  "user_eap_type".  The TEAP module will then
		#  automatically initiate password authentication.
		#
		#  The user credentials are placed into the User-Name
		#  and User-Password attributes inside of the
		#  "inner-tunnel" virtual server.  These attributes
		#  are not sent in TEAP, but are created by the module
		#  from the Basic-Password-Auth-Resp TLV which is in TEAP.
		#
		#  Supported authentication methods inside of TEAP are
		#  EAP-TLS, EAP-MSCHAPv2, and PAP.
		#
#		user_eap_type = mschapv2
#		machine_eap_type = tls

		#  If 'cipher_list' is set here, it will over-ride the
		#  'cipher_list' configuration from the 'tls-common'
		#  configuration.  The EAP-TEAP module has it's own
		#  over-ride for 'cipher_list' because the
		#  specifications mandata a different set of ciphers
		#  than are used by the other EAP methods.
		#
		#  cipher_list though must include "ADH" for anonymous provisioning.
		#  This is not as straight forward as appending "ADH" alongside
		#  "DEFAULT" as "DEFAULT" contains "!aNULL" so instead it is
		#  recommended "ALL:!EXPORT:!eNULL:!SSLv2" is used
		#
	#	cipher_list = "ALL:!EXPORT:!eNULL:!SSLv2"

		#  Authority ID of the server
		#
		#  If you are running a cluster of RADIUS servers, you
		#  should make the value chosen here the same on all
		#  your RADIUS servers.  This value should be unique
		#  to your installation.  We suggest using a domain
		#  name.
		#
	#	authority_identity = "1234"


		#
		#  Automatically go through the workflow of first machine, then user
		#  authentication.
		#
		#  allowed values:  	"machine,user"
		#  	   		"user,machine"
		#			"user"
		#			"machine"
		#
		#  If this isn't set, then TEAP likely won't work.
		#
		#  This configuration sets &session-state:FreeRADIUS-EAP-TEAP-TLV-Identity-Type with the
		#  relevant values.  The TEAP module then picks those values, in order, to authenticate the
		#  chosen identity.  You can set &session-state:FreeRADIUS-EAP-TEAP-TLV-Identity-Type
		#  manually, but that is substantially more complicated.
		#
	#	identity_types = "machine,user"

		#  Same as for TTLS, PEAP, etc.
		#
	#	virtual_server = inner-tunnel
	#}
}
